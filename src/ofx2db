#!/usr/bin/env python
# 
#  ofx2db.py
#  salim
#  
#  Created by Wilson Freitas on 2008-06-29.
#  Copyright 2008 __MyCompanyName__. All rights reserved.
# 
# * I need to define a base path to save database and possible configuration files.
#   $HOME/salim is a good place.

import os
import sys
import logging
import getopt

from salim.ofx import OFXFileParser
from salim import facade
from salim.model import *
from salim import model

APP_NAME = 'ofx2db'
SALIM_HOME = os.path.join(os.environ['HOME'], '.salim')

LOG_LEVEL = {
    'critical': logging.DEBUG,
    'error':    logging.ERROR,
    'warning':  logging.WARNING,
    'info':     logging.INFO,
    'debug':    logging.DEBUG,
    'notset':   logging.NOTSET
}

class GetOptions(object):
    action_labels = {
        '--export-memos': 0,
        '--import-rules': 1,
        '--import-ofx': 2
    }
    def __init__(self):
        self.long_options = ['help', 'verbosity-level=', 'export-memos', 'import-rules', 'import-ofx']
        self.options = 'hv:'
        self.verbosity_level = logging.INFO
        self.actions = []
        self.action = None

    def parse_options(self, argv):
        opts, args = getopt.getopt(argv, self.options, self.long_options)
        for opt, val in opts:
            if opt in ['-h', '--help']:
                self.usage_extended()
            if opt in ['--verbosity-level', '-v']:
                self.verbosity_level = LOG_LEVEL[val]
            if opt in ['--export-memos', '--import-rules', '--import-ofx']:
                self.action = opt[2:]
        if bool(args):
            self.filenames = args

    def usage(self):
        sys.stderr.write('''\
Usage: %(prog)s [OPTION] [FILES]...
Try `%(prog)s --help' for more information.
''' % { 'prog': APP_NAME } )
        sys.exit(1)

    def usage_extended(self):
        sys.stderr.write('''\
Usage: %(prog)s [OPTION] [FILES]...
Import OFX files into Salim database.
Example: %(prog)s -v DEBUG extrato_20080801.ofx extrato_20080701.ofx

Options:
  -v, --verbosity-level     select the verbosity level of output messages: ERROR, WARN, INFO (default), DEBUG
      --export-memos        read one ofx file and generate a file with transaction memos and categories
      --import-rules        read a csv file with <pattern,category.name> and import into database as rules
      --import-ofx          import an ofx file into database
      --help                display this help and exit
''' % { 'prog': APP_NAME } )
        sys.exit(0)
        

def check_user_environment():
    if not os.path.isdir(SALIM_HOME):
        os.mkdir(SALIM_HOME)
    salim_db = os.path.join(SALIM_HOME, 'salim.db')
    salim_db_uri = 'sqlite:%s' % salim_db
    if not os.path.isfile(salim_db):
        create_database(salim_db_uri)
        # TODO: Organize this.
        read_file(model.store, 'salim.sql')
    else:
        create_database(salim_db_uri)


'''
def file_processor(options):
    def file_processor_core(func):
        def process_file():
            logging.info('Given %d files: %s' % (len(options.filenames), ', '.join(options.filenames)) )
            for filename in options.filenames:
                logging.debug('Processing: %s' % filename)
                func(filename)
        return file_processor_core
    return process_files


@file_processor(options)
def import_ofx_files(filename):
    facade.import_ofx(filename)

def import_rules(options):
    logging.info('Given %d files: %s' % (len(options.filenames), ', '.join(options.filenames)) )
    import csv
    for filename in options.filenames:
        logging.debug('Processing: %s' % filename)
        file_memos = file(filename)
        new_rules = old_rules = 0
        for row in csv.reader(file_memos):
            rule = unicode(row[0])
            cat_rule = CategoryRule.by_regex(rule)
            if cat_rule is None:
                cat_name = row[1].decode('utf-8')
                cat = Category.by_name(cat_name)
                if cat is None:
                    cat = Category(cat_name)
                    model.store.add(cat)
                    logging.debug('Creating category: %s' % cat.name)
                cat.add_rule(rule)
                logging.debug('Creating category rule %s to category %s' % (rule, cat.name))
                new_rules += 1
            else:
                logging.debug('Rule already exists: %s' % rule)
                old_rules += 1
        logging.info('Rules created: %d' % new_rules)
        logging.info('Rules repeated: %d' % old_rules)
        file_memos.close()
    model.store.commit()
'''


def import_ofx_files(options):
    # reading ofx files
    logging.info('Given %d files: %s' % (len(options.filenames), ', '.join(options.filenames)) )
    for filename in options.filenames:
        logging.debug('Processing: %s' % filename)
        facade.import_ofx(filename)


def export_memos(options):
    logging.info('Given %d files: %s' % (len(options.filenames), ', '.join(options.filenames)) )
    memos = []
    for filename in options.filenames:
        logging.debug('Processing: %s' % filename)
        ofx = OFXFileParser(filename)
        _memos = [stmt['memo'] for stmt in ofx['StmtTrn']]
        memos += _memos
    logging.debug('Total memos: %d' % len(memos))
    memos = list(set(memos))
    memos.sort()
    logging.debug('Total uniq memos: %d' % len(memos))
    file_memos = file('memos.csv', 'w')
    for memo in memos:
        file_memos.write('%s\n' % memo.encode('utf-8'))
    file_memos.close()
    logging.info('Total %d memos saved in %s' % (len(memos), 'memos.csv'))


def import_csv(options):
    logging.info('Given %d files: %s' % (len(options.filenames), ', '.join(options.filenames)) )
    u = i = 0
    for filename in options.filenames:
        logging.info('Processing: %s' % filename)
        file_csv = file(filename)
        objs = parse_model_csv_file(file_csv, globals())
        for obj in objs:
            try:
                model.store.add(obj)
                model.store.commit()
                i += 1
            except:
                update_model_instance(model.store, obj)
                u += 1
        file_csv.close()
    logging.info('Total objects inserted: %d' % i)
    logging.info('Total objects updated: %d' % u)
    # model.store.commit()


action_functions = {
    'import-ofx': import_ofx_files,
    'export-memos': export_memos,
    'import-csv': import_csv
}

if __name__ == '__main__':
    # reading options
    options = GetOptions()
    try:
        options.parse_options(sys.argv[1:])
    except getopt.GetoptError, e:
        options.usage()

    # setting up the user environment
    check_user_environment()
    # setting up log
    logging.basicConfig(level=options.verbosity_level,
                        format='%(asctime)s [%(levelname)s] %(message)s',
                        datefmt='%a, %d %b %Y %H:%M:%S')
    
    logging.debug('Executing action: %s' % options.action)
    action_functions[options.action](options)
